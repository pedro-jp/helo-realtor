generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String       @id @unique @default(uuid())
  name              String
  email             String       @unique
  phone             String       @default("")
  password          String
  subscriptionId    String       @default("")
  subscription_type String       @default("")
  created_at        DateTime     @default(now())
  updated_at        DateTime     @updatedAt
  profile_photo     String       @default("")
  categories        Category[]
  imoveis           Imovel[]
  office            Office[]
  photos            User_Photo[]

  @@map("users")
}

model User_Photo {
  id     String @id @unique @default(uuid())
  url    String
  userId String
  user   User   @relation(fields: [userId], references: [id])

  @@map("user_photos")
}

model Office {
  id           String          @id @unique @default(uuid())
  name         String
  phone        String
  ownerId      String          @unique
  address_city String          @default(" ")
  address      String          @default(" ")
  latitude     String          @default(" ")
  longitude    String          @default(" ")
  email        String
  created_at   DateTime        @default(now())
  updated_at   DateTime        @updatedAt
  description  String
  banner_image Office_Banner[]

  owner    User      @relation(fields: [ownerId], references: [id])
  imoveis  Imovel[]
  realtors Realtor[] // Um escritório pode ter vários corretores

  @@map("office")
}

model Office_Banner {
  id       String @id @unique @default(uuid())
  url      String
  officeId String

  office Office @relation(fields: [officeId], references: [id])

  @@map("office_banners")
}

model Realtor {
  id               String   @id @unique @default(uuid())
  name             String
  email            String   @unique
  phone            String
  creci            String
  officeId         String
  whatsapp_message String
  created_at       DateTime @default(now())
  updated_at       DateTime @updatedAt
  imoveis          Imovel[]

  office Office @relation(fields: [officeId], references: [id])

  @@map("realtors")
}

model Category {
  id         String   @id @unique @default(uuid())
  name       String
  ownerId    String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  imoveis    Imovel[]

  owner User @relation(fields: [ownerId], references: [id])

  @@map("categories")
}

model Imovel {
  id          String   @id @unique @default(uuid())
  name        String
  price       Decimal
  description String
  local       String
  latitude    String   @default(" ")
  longitude   String   @default(" ")
  quartos     Int
  banheiros   Int
  area        Int
  garagem     Int
  transaction String   @default("Venda")
  active      Boolean
  marker      Boolean  @default(false)
  categoryId  String
  ownerId     String
  realtorId   String   @default("")
  officeId    String   @default("")
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  category  Category    @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  owner     User        @relation(fields: [ownerId], references: [id])
  realtor   Realtor     @relation(fields: [realtorId], references: [id], onDelete: Cascade)
  office    Office      @relation(fields: [officeId], references: [id], onDelete: Cascade)
  images    Images[]
  favorites Favorites[]

  @@map("imoveis")
}

model Images {
  id         String   @id @unique @default(uuid())
  imovelId   String
  url        String
  created_at DateTime @default(now())

  imovel Imovel @relation(fields: [imovelId], references: [id], onDelete: Cascade)

  @@map("images")
}

model Favorites {
  id         String   @id @unique @default(uuid())
  imovelId   String
  ip         String
  created_at DateTime @default(now())

  imovel Imovel @relation(fields: [imovelId], references: [id], onDelete: Cascade)

  @@map("favorites")
}
