generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String       @id @unique @default(uuid())
  name          String
  email         String       @unique
  phone         String       @default("")
  password      String
  created_at    DateTime     @default(now())
  updated_at    DateTime     @updatedAt
  profile_photo String       @default("")
  categories    Category[]
  imoveis       Imovel[]
  office        Office[]
  photos        User_Photo[]

  @@map("users")
}

model User_Photo {
  id     String @id @unique @default(uuid())
  url    String
  userId String
  user   User   @relation(fields: [userId], references: [id])

  @@map("user_photos")
}

model Office {
  id           String          @id @unique @default(uuid())
  name         String
  phone        String
  ownerId      String          @unique
  address_city String          @default(" ")
  address      String          @default(" ")
  email        String
  created_at   DateTime        @default(now())
  updated_at   DateTime        @updatedAt
  description  String
  banner_image Office_Banner[]

  owner    User      @relation(fields: [ownerId], references: [id])
  imoveis  Imovel[]
  realtors Realtor[] // Um escritório pode ter vários corretores

  @@map("office")
}

model Office_Banner {
  id       String @id @unique @default(uuid())
  url      String
  officeId String

  office Office @relation(fields: [officeId], references: [id])

  @@map("office_banners")
}

model Realtor {
  id               String   @id @unique @default(uuid())
  name             String
  email            String   @unique
  phone            String
  creci            String
  officeId         String
  whatsapp_message String
  created_at       DateTime @default(now())
  updated_at       DateTime @updatedAt
  imoveis          Imovel[]

  office Office @relation(fields: [officeId], references: [id])

  @@map("realtors")
}

model Category {
  id         String   @id @unique @default(uuid())
  name       String
  ownerId    String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  imoveis    Imovel[]

  owner User @relation(fields: [ownerId], references: [id])

  @@map("categories")
}

model Imovel {
  id          String   @id @unique @default(uuid())
  name        String
  price       String
  description String
  local       String
  quartos     String   @default("")
  banheiros   String   @default("")
  area        String   @default("")
  garagem     String   @default("")
  active      Boolean
  categoryId  String
  ownerId     String
  realtorId   String   @default("")
  officeId    String   @default("")
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  category Category @relation(fields: [categoryId], references: [id])
  owner    User     @relation(fields: [ownerId], references: [id])
  realtor  Realtor  @relation(fields: [realtorId], references: [id])
  office   Office   @relation(fields: [officeId], references: [id])
  images   Images[]

  @@map("imoveis")
}

model Images {
  id         String   @id @unique @default(uuid())
  imovelId   String
  url        String
  created_at DateTime @default(now())

  imovel Imovel @relation(fields: [imovelId], references: [id])

  @@map("images")
}
